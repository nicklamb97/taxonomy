version: 2
task_description: Calling Database Procedures in OpenROAD Actian 4GL
created_by: nicklamb97
seed_examples:
  - question: How to call a basic database procedure with no parameters in OpenROAD Actian 4GL?
    answer: >
      To call a basic database procedure with no parameters in OpenROAD Actian 4GL, use the following syntax:
      ```sql
      callproc procedurename;
      ```
      For example, to call a database procedure named 'mydbprocedure' with no parameters:
      ```sql
      callproc mydbprocedure;
      ```
      This will execute the database procedure 'mydbprocedure' without passing any parameters.

  - question: Write code to call a database procedure that returns a value in OpenROAD Actian 4GL.
    answer: >
      To call a database procedure that returns a value in OpenROAD Actian 4GL, use the following syntax:
      ```sql
      integer_variable = callproc procedurename;
      ```
      For example, to call a database procedure named 'get_customer_count' and store its return value:
      ```sql
      returnvalue = integer;
      returnvalue = callproc get_customer_count;
      ```
      This code declares an integer variable 'returnvalue' to store the result, then calls the 'get_customer_count'
      procedure and assigns its return value to 'returnvalue'.

  - question: How to pass multiple parameters to a database procedure in OpenROAD Actian 4GL?
    answer: >
      To pass multiple parameters to a database procedure in OpenROAD Actian 4GL, use the following syntax:
      ```sql
      callproc procedurename(param1 = value1, param2 = value2, ...);
      ```
      For example, to call a database procedure named 'update_customer' with multiple parameters:
      ```sql
      callproc update_customer(customer_id = 1001,
                               new_name = 'John Doe',
                               new_balance = 1000.50);
      ```
      This code calls the 'update_customer' procedure, passing three parameters: an integer 'customer_id', a string
      'new_name', and a float 'new_balance'.

  - question: Demonstrate how to call a database procedure with a return value and parameters in OpenROAD Actian 4GL.
    answer: >
      To call a database procedure with both a return value and parameters in OpenROAD Actian 4GL, use the following
      syntax:
      ```sql
      integer_variable = callproc procedurename(param1 = value1, param2 = value2, ...);
      ```
      For example, to call a database procedure named 'calculate_total_sales' with parameters and store its return
      value:
      ```sql
      returnvalue = integer;
      returnvalue = callproc calculate_total_sales(start_date = '2024-01-01',
                                                   end_date = '2024-06-30',
                                                   department = 'Electronics');
      ```
      This code calls the 'calculate_total_sales' procedure with three parameters (start_date, end_date, and
      department) and assigns its integer return value to the 'returnvalue' variable.

  - question: How to use variables when passing parameters to a database procedure in OpenROAD Actian 4GL?
    answer: >
      To use variables when passing parameters to a database procedure in OpenROAD Actian 4GL, simply use the
      variable names in place of literal values. Here's an example:
      ```sql
      -- Declare and initialize variables
      start_date = varchar(10);
      end_date = varchar(10);
      dept_name = varchar(20);
      total_sales = integer;

      -- Set values for variables
      start_date = '2024-01-01';
      end_date = '2024-06-30';
      dept_name = 'Electronics';

      -- Call the database procedure using variables
      total_sales = callproc calculate_total_sales(start_date = start_date,
                                                   end_date = end_date,
                                                   department = dept_name);
      ```
      In this example, we declare and initialize variables, then use them as parameter values when calling the
      'calculate_total_sales' database procedure. The procedure's return value is stored in the 'total_sales'
      variable.

  - question: Write code to call a database procedure with parameters of different data types in OpenROAD Actian 4GL.
    answer: >
      To call a database procedure with parameters of different data types in OpenROAD Actian 4GL, use the
      appropriate variable types for each parameter. Here's an example:
      ```sql
      -- Declare variables of different types
      customer_id = integer;
      customer_name = varchar(50);
      balance = float;
      is_active = boolean;

      -- Set values for variables
      customer_id = 1001;
      customer_name = 'Alice Johnson';
      balance = 1500.75;
      is_active = true;

      -- Call the database procedure with different data types
      callproc update_customer_info(id = customer_id,
                                    name = customer_name,
                                    current_balance = balance,
                                    active_status = is_active);
      ```
      This code calls the 'update_customer_info' database procedure, passing parameters of different data types: an
      integer (id), a varchar (name), a float (current_balance), and a boolean (active_status).

  - question: How to handle errors when calling a database procedure in OpenROAD Actian 4GL?
    answer: >
      To handle errors when calling a database procedure in OpenROAD Actian 4GL, you can use error handling
      mechanisms such as the 'on error' statement. Here's an example:
      ```sql
      -- Declare variables
      result = integer;
      error_code = integer;
      error_message = varchar(200);

      -- Set up error handling
      on error
      begin
        error_code = errornumber;
        error_message = errortext;
        message 'Error calling database procedure: ' + error_message;
        return;
      end;

      -- Call the database procedure
      result = callproc risky_procedure(param1 = 'value1', param2 = 100);

      -- If no error occurred, process the result
      message 'Procedure executed successfully. Result: ' + result;
      ```
      In this example, we set up an error handler using the 'on error' statement. If an error occurs during the
      database procedure call, it will capture the error code and message, display an error message, and exit the
      current scope. If no error occurs, it will display a success message with the procedure's result.

  - question: Demonstrate how to call a database procedure within a 4GL procedure in OpenROAD Actian 4GL.
    answer: >
      To call a database procedure within a 4GL procedure in OpenROAD Actian 4GL, you can simply use the 'callproc'
      statement within your 4GL procedure. Here's an example:
      ```sql
      procedure process_customer(customer_id = integer) =
      begin
        -- Declare variables
        customer_name = varchar(50);
        customer_balance = float;
        update_success = integer;

        -- Call database procedure to get customer info
        callproc get_customer_info(id = customer_id,
                                   name = byref(customer_name),
                                   balance = byref(customer_balance));

        -- Process the customer information
        message 'Customer: ' + customer_name + ', Balance: ' + customer_balance;

        -- Call another database procedure to update customer status
        update_success = callproc update_customer_status(id = customer_id,
                                                         new_status = 'Active');

        -- Check the result of the update
        if update_success = 1 then
          message 'Customer status updated successfully.';
        else
          message 'Failed to update customer status.';
        endif;
      end;
      ```
      In this 4GL procedure named 'process_customer', we demonstrate calling two database procedures:
      1. 'get_customer_info' to retrieve customer information.
      2. 'update_customer_status' to update the customer's status.

      The first call uses 'byref' to pass variables by reference, allowing the database procedure to modify their
      values. The second call returns a value, which we store in the 'update_success' variable to check if the update
      was successful.

  - question: How to pass parameters in a different order when calling a database procedure in OpenROAD Actian 4GL?
    answer: >
      In OpenROAD Actian 4GL, you can pass parameters to a database procedure in any order by using named
      parameters. This allows you to specify the parameters in a different order than they were defined in the
      procedure. Here's an example:
      ```sql
      -- Assume the database procedure 'update_product' is defined with parameters
      -- in this order: product_id, name, price, category

      -- Declare variables
      prod_id = integer;
      prod_name = varchar(50);
      prod_price = float;
      prod_category = varchar(30);

      -- Set values
      prod_id = 1001;
      prod_name = 'Smartphone X';
      prod_price = 599.99;
      prod_category = 'Electronics';

      -- Call the database procedure with parameters in a different order
      callproc update_product(category = prod_category,
                              price = prod_price,
                              product_id = prod_id,
                              name = prod_name);
      ```
      In this example, we call the 'update_product' database procedure, but we pass the parameters in a different
      order than they were defined. By using named parameters (e.g., 'category = prod_category'), we ensure that each
      value is assigned to the correct parameter, regardless of the order in which they are specified.

  - question: Write code to call a database procedure that modifies multiple output parameters in OpenROAD Actian 4GL.
    answer: >
      To call a database procedure that modifies multiple output parameters in OpenROAD Actian 4GL, you can use the
      'byref' keyword for each parameter that you want to be modified. Here's an example:
      ```sql
      -- Declare variables to hold output values
      customer_name = varchar(50);
      customer_email = varchar(100);
      customer_balance = float;
      last_purchase_date = date;

      -- Declare variable for input parameter
      customer_id = integer;

      -- Set input value
      customer_id = 1001;

      -- Call the database procedure with multiple output parameters
      callproc get_customer_details(id = customer_id,
                                    name = byref(customer_name),
                                    email = byref(customer_email),
                                    balance = byref(customer_balance),
                                    last_purchase = byref(last_purchase_date));

      -- Display the retrieved information
      message 'Customer Details:';
      message 'Name: ' + customer_name;
      message 'Email: ' + customer_email;
      message 'Balance: ' + customer_balance;
      message 'Last Purchase Date: ' + last_purchase_date;
      ```
      In this example, we call a database procedure named 'get_customer_details' that takes one input parameter (id)
      and modifies four output parameters (name, email, balance, and last_purchase). By using 'byref' for these
      parameters, we allow the database procedure to modify their values. After the procedure call, the variables
      contain the updated information, which we then display using message statements.
