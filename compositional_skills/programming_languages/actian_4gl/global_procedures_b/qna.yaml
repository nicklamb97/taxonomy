version: 2
task_description: Write Actian 4GL OpenROAD Global Procedures
created_by: willsjames
seed_examples:
  - question: How to convert a simple 4GL global procedure to C#?
    answer: |
      Convert a simple 4GL global procedure to C#:
      ```
      // 4GL
      procedure simple_message =
      begin
          message 'Hello, OpenROAD!';
      end

      // C#
      public static void SimpleMessage()
      {
          Console.WriteLine("Hello, OpenROAD!");
      }
      ```
      This converts a simple procedure to display a message.

  - question: >-
      How do you convert a 4GL global procedure with multiple parameters to C#?
    answer: |
      Convert a 4GL global procedure with multiple parameters to C#:
      ```
      // 4GL
      procedure add_numbers(a = integer, b = integer) = integer;
      begin
          return a + b;
      end

      // C#
      public static int AddNumbers(int a, int b)
      {
          return a + b;
      }
      ```
      This converts a procedure that adds two integers.

  - question: >-
      Write a 4GL global procedure that performs string concatenation and convert it to C#.
    answer: |
      Perform string concatenation:
      ```
      // 4GL
      procedure concat_strings(str1 = varchar, str2 = varchar) = varchar;
      begin
          return str1 + str2;
      end

      // C#
      public static string ConcatStrings(string str1, string str2)
      {
          return str1 + str2;
      }
      ```
      This converts a procedure that concatenates two strings.

  - question: How do you convert a 4GL global procedure with a return statement to C#?
    answer: |
      Convert a 4GL global procedure with a return statement:
      ```
      // 4GL
      procedure multiply_by_two(number = float) = float;
      begin
          return number * 2;
      end

      // C#
      public static float MultiplyByTwo(float number)
      {
          return number * 2;
      }
      ```
      This converts a procedure that multiplies a number by two.

  - question: How to convert a 4GL procedure with a local variable to C#?
    answer: |
      Convert a procedure with a local variable:
      ```
      // 4GL
      procedure calculate_circle_area(radius = float) = float;
      declare
          pi = float;
      begin
          pi = 3.14159;
          return pi * radius * radius;
      end

      // C#
      public static float CalculateCircleArea(float radius)
      {
          const float pi = 3.14159f;
          return pi * radius * radius;
      }
      ```
      This converts a procedure that calculates the area of a circle.

  - question: >-
      Write a 4GL procedure that uses conditional statements and convert it to C#.
    answer: |
      Convert a procedure with conditional statements:
      ```
      // 4GL
      procedure check_even_odd(number = integer) = varchar;
      begin
          if number % 2 = 0 then
              return 'Even';
          else
              return 'Odd';
          endif;
      end

      // C#
      public static string CheckEvenOdd(int number)
      {
          return (number % 2 == 0) ? "Even" : "Odd";
      }
      ```
      This converts a procedure that checks if a number is even or odd.

  - question: How to convert a 4GL procedure that uses loops to C#?
    answer: |
      Convert a procedure with loops:
      ```
      // 4GL
      procedure sum_first_n(n = integer) = integer;
      declare
          sum = integer;
          i = integer;
      begin
          sum = 0;
          for i = 1 to n do
              sum = sum + i;
          endfor;
          return sum;
      end

      // C#
      public static int SumFirstN(int n)
      {
          int sum = 0;
          for (int i = 1; i <= n; i++)
          {
              sum += i;
          }
          return sum;
      }
      ```
      This converts a procedure that sums the first N natural numbers.

  - question: >-
      Write a 4GL procedure that interacts with a database and convert it to C#.
    answer: |
      Convert a procedure that interacts with a database:
      ```
      // 4GL
      procedure get_customer_name(customer_id = integer) = varchar;
      declare
          customer_name = varchar;
      begin
          select name into customer_name from customers where id = customer_id;
          return customer_name;
      end

      // C#
      public static string GetCustomerName(int customerId)
      {
          string customerName = "";
          using (var connection = new SqlConnection("your_connection_string"))
          {
              connection.Open();
              using (var command = new SqlCommand("SELECT name FROM customers WHERE id = @customerId", connection))
              {
                  command.Parameters.AddWithValue("@customerId", customerId);
                  customerName = (string)command.ExecuteScalar();
              }
          }
          return customerName;
      }
      ```
      This converts a procedure that retrieves a customer name from a database.

  - question: >-
      How to convert a 4GL procedure that handles exceptions to C#?
    answer: |
      Convert a procedure with exception handling:
      ```
      // 4GL
      procedure divide(a = float, b = float) = float;
      begin
          on exception
              return 0;
          endon;
          return a / b;
      end

      // C#
      public static float Divide(float a, float b)
      {
          try
          {
              return a / b;
          }
          catch (DivideByZeroException)
          {
              return 0;
          }
      }
      ```
      This converts a procedure that handles division by zero exceptions.

  - question: How to convert a 4GL procedure that uses arrays to C#?
    answer: |
      Convert a procedure with arrays:
      ```
      // 4GL
      procedure sum_array_elements(arr = float_array) = float;
      declare
          sum = float;
          i = integer;
      begin
          sum = 0;
          for i = 1 to ubound(arr, 1) do
              sum = sum + arr[i];
          endfor;
          return sum;
      end

      // C#
      public static float SumArrayElements(float[] arr)
      {
          float sum = 0;
          foreach (float element in arr)
          {
              sum += element;
          }
          return sum;
      }
      ```
      This converts a procedure that sums elements of an array.

  - question: How to convert a 4GL procedure that uses structures to C#?
    answer: |
      Convert a procedure with structures:
      ```
      // 4GL
      type person is
          record
              name varchar,
              age integer;
      endrecord;

      procedure get_person_info(p = person) = varchar;
      begin
          return p.name + ' is ' + varchar(p.age) + ' years old';
      end

      // C#
      public struct Person
      {
          public string Name;
          public int Age;
      }

      public static string GetPersonInfo(Person p)
      {
          return $"{p.Name} is {p.Age} years old";
      }
      ```
      This converts a procedure that works with a structured type.

  - question: >-
      Write a 4GL procedure that calls another procedure and convert it to C#.
    answer: |
      Convert a procedure that calls another procedure:
      ```
      // 4GL
      procedure inner_proc(a = integer) = integer;
      begin
          return a * 2;
      end

      procedure outer_proc(b = integer) = integer;
      begin
          return inner_proc(b) + 10;
      end

      // C#
      public static int InnerProc(int a)
      {
          return a * 2;
      }

      public static int OuterProc(int b)
      {
          return InnerProc(b) + 10;
      }
      ```
      This converts a procedure that calls another procedure.

  - question: How to convert a 4GL procedure with nested blocks to C#?
    answer: |
      Convert a procedure with nested blocks:
      ```
      // 4GL
      procedure nested_blocks(x = integer) = integer;
      begin
          if x > 0 then
              x = x * 2;
              if x > 10 then
                  x = x + 5;
              endif;
          endif;
          return x;
      end

      // C#
      public static int NestedBlocks(int x)
      {
          if (x > 0)
          {
              x *= 2;
              if (x > 10)
              {
                  x += 5;
              }
          }
          return x;
      }
      ```
      This converts a procedure with nested conditional blocks.

  - question: >-
      Write a 4GL procedure that uses recursion and convert it to C#.
    answer: |
      Convert a procedure with recursion:
      ```
      // 4GL
      procedure factorial(n = integer) = integer;
      begin
          if n <= 1 then
              return 1;
          else
              return n * factorial(n - 1);
          endif;
      end

      // C#
      public static int Factorial(int n)
      {
          if (n <= 1)
          {
              return 1;
          }
          else
          {
              return n * Factorial(n - 1);
          }
      }
      ```
      This converts a procedure that calculates factorial using recursion.

  - question: >-
      How to convert a 4GL procedure that handles dates and times to C#?
    answer: |
      Convert a procedure that handles dates and times:
      ```
      // 4GL
      procedure get_current_date() = date;
      begin
          return today;
      end

      // C#
      public static DateTime GetCurrentDate()
      {
          return DateTime.Today;
      }
      ```
      This converts a procedure that returns the current date.

  - question: >-
      Write a 4GL procedure that formats strings and convert it to C#.
    answer: |
      Convert a procedure that formats strings:
      ```
      // 4GL
      procedure format_string(name = varchar, age = integer) = varchar;
      begin
          return 'Name: ' + name + ', Age: ' + varchar(age);
      end

      // C#
      public static string FormatString(string name, int age)
      {
          return $"Name: {name}, Age: {age}";
      }
      ```
      This converts a procedure that formats a string with name and age.
