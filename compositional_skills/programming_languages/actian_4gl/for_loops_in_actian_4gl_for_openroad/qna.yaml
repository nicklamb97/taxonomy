version: 2
task_description: Convert Actian 4GL OpenROAD FOR Loops to C# and implement nested
  loop structures
created_by: willsjames
seed_examples:
  - question: How would you implement nested FOR loops in Actian 4GL OpenROAD FOR Loops
      to create a 5x5 multiplication table?
    answer: "Here are the steps to implement nested FOR loops in Actian 4GL OpenROAD:\n\
      1. Start with a DISPLAY statement to indicate the beginning of the example.\n\
      2. Implement the outer loop using 'FOR i = 1 TO 5'.\n3. Inside the outer loop,\
      \ define the inner loop variable: 'DEFINE j INTEGER'.\n4. Implement the inner\
      \ loop using 'FOR j = 1 TO 5'.\n5. Inside the inner loop, use a DISPLAY statement\
      \ to show the values of i, j, and their product.\n6. Close the inner loop with\
      \ 'ENDFOR'.\n7. Close the outer loop with 'ENDFOR'.\n\nHere's the complete code:\n\
      ```4gl\nDISPLAY \"Example 4: Nested FOR Loops\"\nFOR i = 1 TO 5\n    DEFINE j\
      \ INTEGER\n    FOR j = 1 TO 5\n        DISPLAY \"i: \", i, \", j: \", j, \" -\
      \ Product: \", i * j\n    ENDFOR\nENDFOR\n```"
  - question: How would you convert the Actian 4GL OpenROAD FOR Loops nested loop structure
      to C# to create the same 5x5 multiplication table?
    answer: "To convert the Actian 4GL OpenROAD nested FOR loops to C#, follow these\
      \ steps:\n1. Replace 'DISPLAY' with 'Console.WriteLine()' for the initial output.\n\
      2. Use C# for loop syntax for both outer and inner loops: 'for (int i = 1; i <=\
      \ 5; i++)'.\n3. Remove the separate variable declaration for the inner loop.\n\
      4. Use string interpolation for the output statement inside the inner loop.\n\
      5. Enclose each loop body in curly braces {} instead of using ENDFOR.\n\nHere's\
      \ the complete C# code:\n```csharp\nConsole.WriteLine(\"Example 4: Nested FOR\
      \ Loops\");\nfor (int i = 1; i <= 5; i++)\n{\n    for (int j = 1; j <= 5; j++)\n\
      \    {\n        Console.WriteLine($\"i: {i}, j: {j} - Product: {i * j}\");\n \
      \   }\n}\n```"
  - question: How would you modify the Actian 4GL OpenROAD FOR Loops example to create
      a triangular multiplication table instead of a full 5x5 table?
    answer: "To modify the Actian 4GL OpenROAD FOR Loops to create a triangular multiplication\
      \ table:\n1. Keep the outer loop the same: 'FOR i = 1 TO 5'.\n2. Modify the inner\
      \ loop to use 'i' as its upper bound: 'FOR j = 1 TO i'.\n3. The rest of the code\
      \ remains the same.\n\nHere's the modified Actian 4GL code:\n```4gl\nDISPLAY \"\
      Triangular Multiplication Table\"\nFOR i = 1 TO 5\n    DEFINE j INTEGER\n    FOR\
      \ j = 1 TO i\n        DISPLAY \"i: \", i, \", j: \", j, \" - Product: \", i *\
      \ j\n    ENDFOR\nENDFOR\nThis will output a triangular multiplication table where\
      \ each row has as many columns as its row number."
  - question: How would you implement error handling in Actian 4GL OpenROAD FOR Loops
      to prevent division by zero when calculating the product of i and j?
    answer: "To implement error handling in Actian 4GL OpenROAD FOR Loops to prevent\
      \ division by zero:\n\nUse an IF statement to check if j is zero before performing\
      \ the multiplication.\nIf j is zero, display an error message instead of the product.\n\
      Otherwise, proceed with the normal calculation and display.\n\nHere's the modified\
      \ Actian 4GL code with error handling:\n```4gl\nDISPLAY \"Example with Error Handling\"\
      \nFOR i = 0 TO 5\n    DEFINE j INTEGER\n    FOR j = 0 TO 5\n        IF j = 0 THEN\n\
      \            DISPLAY \"i: \", i, \", j: \", j, \" - Error: Cannot divide by zero\"\
      \n        ELSE\n            DISPLAY \"i: \", i, \", j: \", j, \" - Product: \"\
      , i * j, \" - Division: \", i / j\n        ENDIF\n    ENDFOR\nENDFOR\n```\nThis\
      \ code will handle the case where j is zero, preventing a division by zero error."
  - question: How would you optimize the nested FOR loops in Actian 4GL OpenROAD FOR
      Loops to improve performance when working with larger ranges?
    answer: "To optimize nested FOR loops in Actian 4GL OpenROAD for larger ranges:\n\
      \nMinimize operations inside the innermost loop.\nPre-calculate any constant values\
      \ outside the loops.\nConsider using a single-dimensional loop if possible.\n\
      Use appropriate data types to minimize memory usage.\n\nHere's an example of optimized\
      \ code:\n```4gl\nDEFINE i, j, product INTEGER\nDEFINE range INTEGER\nLET range\
      \ = 1000  -- Pre-define the range\n\nDISPLAY \"Optimized Nested Loops\"\nFOR i\
      \ = 1 TO range\n    FOR j = 1 TO range\n        LET product = i * j\n        --\
      \ Perform any necessary operations with 'product' here\n    ENDFOR\nENDFOR\n```\n\
      This optimized version pre-defines the range, uses appropriate data types, and\
      \ minimizes operations inside the inner loop. For very large ranges, consider\
      \ using database operations or other more efficient data structures if possible."
  - question: How would you implement a FOR loop in Actian 4GL OpenROAD FOR Loops that
      iterates in reverse order?
    answer: "To implement a FOR loop in Actian 4GL OpenROAD that iterates in reverse\
      \ order:\n\nUse the DOWNTO keyword instead of TO in the FOR loop declaration.\n\
      Set the starting value higher than the ending value.\n\nHere's an example of a\
      \ reverse order FOR loop:\n```4gl\nDISPLAY \"Reverse Order FOR Loop\"\nDEFINE\
      \ i INTEGER\nFOR i = 10 DOWNTO 1\n    DISPLAY \"Current value: \", i\nENDFOR\n\
      ```\n\nThis loop will start at 10 and count down to 1, displaying each value along\
      \ the way. The output will show the numbers from 10 to 1 in descending order."
  - question: How would you convert the Actian 4GL OpenROAD FOR Loops reverse order
      loop to C#?
    answer: "To convert the Actian 4GL OpenROAD reverse order FOR loop to C#, follow\
      \ these steps:\n\nUse the standard C# for loop syntax.\nInitialize the loop variable\
      \ to the start value (10 in this case).\nSet the condition to continue while the\
      \ variable is greater than or equal to the end value (1 in this case).\nDecrement\
      \ the loop variable in the iteration expression.\n\nHere's the C# equivalent of\
      \ the reverse order loop:\n```4gl\nConsole.WriteLine(\"Reverse Order FOR Loop\"\
      );\nfor (int i = 10; i >= 1; i--)\n{\n    Console.WriteLine($\"Current value:\
      \ {i}\");\n}\n```\n\nThis C# code will produce the same output as the Actian 4GL\
      \ OpenROAD version, displaying numbers from 10 to 1 in descending order."
