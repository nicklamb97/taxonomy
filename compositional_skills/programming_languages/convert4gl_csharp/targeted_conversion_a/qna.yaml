version: 3
task_description: Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.
created_by: guyvernon
seed_examples:
  - question: "How would you convert the following Actian 4GL code to c#? Respond only in code:
    PROCEDURE GetObject
    (

        /* Input */
        ObjectNo = INTEGER    NOT NULL;
        Status     = VARCHAR(1) NOT NULL;

        /* Output */
        Result     = tpo_object;

    ) =
    DECLARE

        return_no     = INTEGER      NOT NULL;
        return_msg = VARCHAR(100) NOT NULL;

        BOObject   = bo_object;

    ENDDECLARE
    BEGIN


        /*--------------------------------------------------------------------------------------------*/
        /* Validation                                                                                 */
        /*--------------------------------------------------------------------------------------------*/

        /* Validate the ObjectNo exists. */

        return_msg = '';

        IF ObjectNo = 0
        THEN
            CurUserSession.ValidateFatal( msg = 'Object Number must be set.');
        ENDIF;

        IF ObjectDAO.ValidateObjectNo (object_no = ObjectNo,
                                           msg         = BYREF(return_msg)) != ER_OK THEN
            CurUserSession.ValidateFatal( msg = return_msg );
        ENDIF;

        /* Retrieve the object */

        return_no = ObjectDAO.GetObject (object_no = ObjectNo,
                                              status      = Status,
                                              object    = BYREF(BOObject));

        /* Set the return TPO and report if empty list */

        Result = Mapper.ToObjectTPO( bo = BOObject );

    END;"
    answer: |
      // API Endpoint - GetObject 
      [HttpGet("GetObject/{objectNo:int}/{status}")]
      public async Task<ActionResult<NotificationTPO<ObjectTPO>>> GetObject(int objectNo, string status)
      {
          StringBuilder logMessage = new StringBuilder();
          logMessage.AppendLine(StringFunctions.LogStringBuilder($"GetObject Started objectNo={objectNo}, status={status}"));

          await _objectDAO.ValidateObjectNo(objectNo);
          var serviceResponse = new NotificationTPO<ObjectTPO>();
          bool success = true;
          try
          {
              await _dbConnection.OpenConnectionWithTransaction();
              ObjectBO object = await _objectData.GetObject(_dbConnection, objectNo, status);
              serviceResponse.Result = _objectMapper.ToObjectTPO(object);
          }
          catch (Exception e)
          {
              success = false;
              //do not wait for response and continue 
              _ = _dbConnection.Rollback();
              logMessage.AppendLine(StringFunctions.LogStringBuilder($"GetObject Started objectNo={objectNo}, status={status}"));
              throw new Exception(e.Message, e);
          }
          finally
          {
              if (success) { await _dbConnection.CommitAndClose(); }
              logMessage.AppendLine(StringFunctions.LogStringBuilder("GetObject finished"));
              _logger.LogInformation(logMessage.ToString());
          }
          return Ok(serviceResponse);
      }
  - question: "How would you convert the following Actian 4GL code to c#? Respond only in code:
    METHOD GetObject
    (
        object_no = INTEGER    NOT NULL;
        status  	  = VARCHAR(1) NOT NULL;

        object    = bo_object;
    )=
    DECLARE

        rowcount = INTEGER      NOT NULL;
        l_where	 = VARCHAR(100) NOT NULL;

    ENDDECLARE
    BEGIN

        l_where = ' object_no = ' + VARCHAR(object_no);

        IF status <> '' THEN
            l_where = l_where + ' AND object_status = ' + HC_QUOTE + status + HC_QUOTE;
        ENDIF;

        SELECT object_no		AS object.object_no,
           object_name		AS object.object_name,
           object_status		AS object.object_status,
           object_editcounter	AS object.object_editcounter
        FROM object
        WHERE :l_where;

        IF sql_check(rowcount = BYREF(rowcount)) <> ER_OK THEN
            RETURN ER_FAIL;
        ENDIF;

        COMMIT;

    END;"
    answer: |
      // Get object SQL calls
      public async Task<ObjectBO> GetObject(ConnectionHelper connection, int objectNo, string status)
      {
          if (!connection.IsConnectionOpen())
              throw new Exception("GetObject tried to use a closed connection ");

          string fromQuery = "object f";
          string whereQuery = $"f.object_no={objectNo} ";

          if (!string.IsNullOrEmpty(status))
          {
              whereQuery = $" {whereQuery} AND f.object_status='{status}'";
          }

          string squery = $"select f.object_no, f.object_name, f.object_status, f.object_editcounter from {fromQuery} where {whereQuery}";

          ObjectBO objects = new ObjectBO();
          try
          {
              DbCommand dbCommand = connection.GetCommand();
              dbCommand.CommandText = squery;
              var reader = await dbCommand.ExecuteReaderAsync();
              while (reader.Read())
              {
                  if (!reader.IsDBNull(0))
                  {
                      objects = new ObjectBO()
                      {
                          object_no = reader.IsDBNull(0) ? 0 : reader.GetInt32("object_no"),
                          object_name = reader.IsDBNull(1) ? string.Empty : reader.GetString("object_name"),
                          object_status = reader.IsDBNull(2) ? string.Empty : reader.GetString("object_status"),
                          object_editcounter = reader.IsDBNull(3) ? 0 : reader.GetInt32("object_editcounter")
                      };
                  }

              }
          }
          catch (Exception e)
          {

              _logger.LogError("Error from class ObjectData - method GetObject");
              throw new Exception(e.Message, e);
          }

          return objects;
      }
  - question: "How would you convert the following Actian 4GL code to c#? Respond only in code:
    SCP_GetFoo:

        /* Input */
        FooNo = INTEGER NOT NULL;
        Status = VARCHAR(1) NOT NULL;

        /* Output */
        Result = tpo_foo_detail;

        IF FooNo = 0
        THEN
        CurUserSession.ValidateFatal( msg = 'Foo Number must be set.');
        ENDIF;

        IF FooDAO.ValidateFooNo (p_msg      = ByRef(l_return_msg),
                                     p_foo_no = FooNo) != ER_OK THEN
            CurUserSession.ValidateFatal( msg = l_return_msg );
        ENDIF;

        /* Fatal error if any validation errors */

        IF CurNotifications.hasValidationNotifications = TRUE THEN
            CurUserSession.ValidateFatal( msg = 'Validation notifications.');
        ENDIF;

        /* Retrieve the foo */
        l_return = FooDAO.GetFoo (p_foo_no = FooNo,
                        p_foo    = BYREF(l_bo),
                        p_status   = Status);

        IF l_return <> ER_OK THEN
            CurUserSession.ValidateFatal(msg = 'Error occurred getting foo ['
                                             + VARCHAR(FooNo)
                                             + ']'  );
        ENDIF;

        /* Set the return TPO and report if empty list */
        Result = Mapper.ToFooTPO( bo = l_bo );"
    answer: |
      // API Endpoint - GetFoo 
      [HttpGet("GetFoo/{fooNo:int}/{status}")]
      public async Task<ActionResult<NotificationTPO<FooTPO>>> GetFoo(int fooNo, string status)
      {
          StringBuilder logMessage = new StringBuilder();
          logMessage.AppendLine(StringFunctions.LogStringBuilder($"GetFoo Started fooNo={fooNo}, status={status}"));

          await _fooDAO.ValidateFooNo(fooNo);
          var serviceResponse = new NotificationTPO<FooTPO>();
          bool success = true;
          try
          {
              await _dbConnection.OpenConnectionWithTransaction();
              FooBO foo = await _fooData.GetFoo(_dbConnection, fooNo, status);
              serviceResponse.Result = _fooMapper.ToFooTPO(foo);
          }
          catch (Exception e)
          {
              success = false;
              //do not wait for response and continue 
              _ = _dbConnection.Rollback();
              logMessage.AppendLine(StringFunctions.LogStringBuilder($"GetFoo Started fooNo={fooNo}, status={status}"));
              throw new Exception(e.Message, e);
          }
          finally
          {
              if (success) { await _dbConnection.CommitAndClose(); }
              logMessage.AppendLine(StringFunctions.LogStringBuilder("GetFoo finished"));
              _logger.LogInformation(logMessage.ToString());
          }
          return Ok(serviceResponse);
      }

  - question: "How would you convert the following Actian 4GL code to c#? Respond only in code:
    METHOD ValidateFooNo
    (
        p_foo_no       = INTEGER      NOT NULL;

        p_footype_code = VarChar(1)   NOT NULL;
        p_msg            = VarChar(200) NOT NULL;
    )=
    Declare

        l_foo_no   = INTEGER NOT NULL;
        l_rowcount = INTEGER NOT NULL;
        l_status   = INTEGER NOT NULL;

    EndDeclare
    Begin

        SELECT foo_no       AS :l_foo_no,
               footype_code AS :p_footype_code
        FROM foo
        WHERE foo_no = :p_foo_no;

        l_status = CALLPROC sql_check(rowcount = BYREF(l_rowcount));

        IF l_status <> ER_OK THEN
            RETURN ER_FAIL;
        ENDIF;

        IF (l_rowcount = 0) THEN
        p_msg = 'Foo number not found in TmsFoo table.';
        RETURN ER_FAIL;
        END

IF;

        RETURN ER_OK;
    End"
    answer: |
      public async Task<bool> ValidateFooNo(int fooNo)
      {
          var query = $"SELECT foo_no, footype_code FROM foo WHERE foo_no = {fooNo}";
          bool fooExists = false;
          try
          {
              using (var connection = new SqlConnection(_connectionString))
              {
                  await connection.OpenAsync();
                  using (var command = new SqlCommand(query, connection))
                  {
                      using (var reader = await command.ExecuteReaderAsync())
                      {
                          fooExists = reader.HasRows;
                      }
                  }
              }
              if (!fooExists)
              {
                  throw new Exception("Foo number not found in TmsFoo table.");
              }
          }
          catch (Exception ex)
          {
              _logger.LogError($"Error validating foo number {fooNo}: {ex.Message}");
              throw;
          }

          return fooExists;
      }
