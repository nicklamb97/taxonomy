version: 2
task_description: Learn about converting Actian 4GL code for OpenROAD to C#.
created_by: nicklamb97
seed_examples:
  - question: "Convert this 4GL Select statement to C#. Respond only in code:
    SELECT employee_id, full_name, salary FROM employees WHERE department = 'Marketing' AND hire_date > '2023-01-01';"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "SELECT employee_id, full_name, salary FROM employees WHERE department = @department AND hire_date > @hireDate",
              connection))
          {
              command.Parameters.AddWithValue("@department", "Marketing");
              command.Parameters.AddWithValue("@hireDate", new DateTime(2023, 1, 1));
              using (SqlDataReader reader = command.ExecuteReader())
              {
                  while (reader.Read())
                  {
                      int employeeId = (int)reader["employee_id"];
                      string fullName = reader["full_name"].ToString();
                      decimal salary = (decimal)reader["salary"];
                      // Process data
                  }
              }
          }
      }

  - question: "How would you convert this 4GL Insert statement to C#? Respond only in code:
    INSERT INTO suppliers (supplier_name, contact_person, phone_number) VALUES ('Tech Solutions', 'John Doe', '+1-555-1234');"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "INSERT INTO suppliers (supplier_name, contact_person, phone_number) VALUES (@supplierName, @contactPerson, @phoneNumber)",
              connection))
          {
              command.Parameters.AddWithValue("@supplierName", "Tech Solutions");
              command.Parameters.AddWithValue("@contactPerson", "John Doe");
              command.Parameters.AddWithValue("@phoneNumber", "+1-555-1234");
              command.ExecuteNonQuery();
          }
      }

  - question: "Convert this 4GL Update statement to C#. Respond only in code:
    UPDATE inventory SET quantity = quantity - 10, last_updated = CURRENT WHERE product_id = 789;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "UPDATE inventory SET quantity = quantity - @decreaseAmount, last_updated = @currentDate WHERE product_id = @productId",
              connection))
          {
              command.Parameters.AddWithValue("@decreaseAmount", 10);
              command.Parameters.AddWithValue("@currentDate", DateTime.Now);
              command.Parameters.AddWithValue("@productId", 789);
              command.ExecuteNonQuery();
          }
      }

  - question: "How would you convert this 4GL Delete statement to C#? Respond only in code:
    DELETE FROM expired_sessions WHERE last_activity < CURRENT - INTERVAL '30 DAYS';"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "DELETE FROM expired_sessions WHERE last_activity < @cutoffDate",
              connection))
          {
              command.Parameters.AddWithValue("@cutoffDate", DateTime.Now.AddDays(-30));
              command.ExecuteNonQuery();
          }
      }

  - question: "Convert this 4GL transaction to C#. Respond only in code:
    BEGIN WORK;
    INSERT INTO orders (customer_id, order_date, total_amount) VALUES (123, CURRENT, 500.00);
    UPDATE customers SET total_orders = total_orders + 1 WHERE customer_id = 123;
    COMMIT WORK;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlTransaction transaction = connection.BeginTransaction())
          {
              try
              {
                  using (SqlCommand insertCommand = new SqlCommand(
                      "INSERT INTO orders (customer_id, order_date, total_amount) VALUES (@customerId, @orderDate, @totalAmount)",
                      connection, transaction))
                  {
                      insertCommand.Parameters.AddWithValue("@customerId", 123);
                      insertCommand.Parameters.AddWithValue("@orderDate", DateTime.Now);
                      insertCommand.Parameters.AddWithValue("@totalAmount", 500.00m);
                      insertCommand.ExecuteNonQuery();
                  }

                  using (SqlCommand updateCommand = new SqlCommand(
                      "UPDATE customers SET total_orders = total_orders + 1 WHERE customer_id = @customerId",
                      connection, transaction))
                  {
                      updateCommand.Parameters.AddWithValue("@customerId", 123);
                      updateCommand.ExecuteNonQuery();
                  }

                  transaction.Commit();
              }
              catch
              {
                  transaction.Rollback();
                  throw;
              }
          }
      }

  - question: "How would you convert this 4GL error handling to C#? Respond only in code:
    WHENEVER ERROR
    BEGIN
        LET error_code = SQLCA.SQLCODE;
        LET error_message = SQLCA.SQLERRM;
        CALL log_error(error_code, error_message);
        RAISE EXCEPTION error_message;
    END"
    answer: |
      try
      {
          // Database operations
      }
      catch (SqlException ex)
      {
          int errorCode = ex.Number;
          string errorMessage = ex.Message;
          LogError(errorCode, errorMessage);
          throw new Exception(errorMessage);
      }

  - question: "Convert this 4GL FOR loop to C#. Respond only in code:
    FOR prod IN SELECT product_id, product_name, unit_price FROM products WHERE category = 'Electronics' AND stock > 0
        LET total_value = prod.unit_price * prod.stock;
        DISPLAY prod.product_id, prod.product_name, total_value;
    END FOR;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "SELECT product_id, product_name, unit_price, stock FROM products WHERE category = @category AND stock > 0",
              connection))
          {
              command.Parameters.AddWithValue("@category", "Electronics");
              using (SqlDataReader reader = command.ExecuteReader())
              {
                  while (reader.Read())
                  {
                      int productId = (int)reader["product_id"];
                      string productName = reader["product_name"].ToString();
                      decimal unitPrice = (decimal)reader["unit_price"];
                      int stock = (int)reader["stock"];
                      decimal totalValue = unitPrice * stock;
                      Console.WriteLine($"{productId} {productName} {totalValue:C}");
                  }
              }
          }
      }

  - question: "How would you convert this 4GL WHILE loop to C#? Respond only in code:
    LET retry_count = 0;
    WHILE connection_status != 'Connected' AND retry_count < 5
        CALL attempt_connection();
        LET retry_count = retry_count + 1;
        SLEEP 2;
    END WHILE;"
    answer: |
      int retryCount = 0;
      while (connectionStatus != "Connected" && retryCount < 5)
      {
          AttemptConnection();
          retryCount++;
          Thread.Sleep(2000);
      }

  - question: "Convert this 4GL conditional statement to C#. Respond only in code:
    IF order_total > 1000 THEN
        LET shipping_cost = 0
    ELIF order_total > 500 THEN
        LET shipping_cost = 5.99
    ELSE
        LET shipping_cost = 9.99
    END IF;"
    answer: |
      decimal shippingCost;
      if (orderTotal > 1000)
      {
          shippingCost = 0m;
      }
      else if (orderTotal > 500)
      {
          shippingCost = 5.99m;
      }
      else
      {
          shippingCost = 9.99m;
      }

  - question: "How would you convert this 4GL string concatenation to C#? Respond only in code:
    LET order_summary = 'Order #' || TO_CHAR(order_id) || ' - ' || customer_name || ' (' || TO_CHAR(order_date, '%Y-%m-%d') || ')';"
    answer: |
      string orderSummary = $"Order #{orderId} - {customerName} ({orderDate:yyyy-MM-dd})";

  - question: "Convert this 4GL function call to C#. Respond only in code:
    FUNCTION calculate_discount(p_order_total DECIMAL(10,2), p_customer_type CHAR(10)) RETURNS DECIMAL(10,2)
        IF p_customer_type = 'VIP' THEN
            RETURN p_order_total * 0.15
        ELSE
            RETURN p_order_total * 0.05
        END IF
    END FUNCTION

    LET discount_amount = calculate_discount(750.00, 'VIP');"
    answer: |
      public decimal CalculateDiscount(decimal orderTotal, string customerType)
      {
          if (customerType == "VIP")
          {
              return orderTotal * 0.15m;
          }
          else
          {
              return orderTotal * 0.05m;
          }
      }

      // Usage
      decimal discountAmount = CalculateDiscount(750.00m, "VIP");
