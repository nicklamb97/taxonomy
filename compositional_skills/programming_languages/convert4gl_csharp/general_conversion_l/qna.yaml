version: 2
task_description: Learn about converting Actian 4GL code for OpenROAD to C#.
created_by: nicklamb97
seed_examples:
  - question: "How would you convert this 4GL Select statement to C#? Respond only in code:
    SELECT runner_id, full_name, age_category FROM runners WHERE best_time < '03:30:00';"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "SELECT runner_id, full_name, age_category FROM runners WHERE best_time < @bestTime",
              connection))
          {
              command.Parameters.AddWithValue("@bestTime", TimeSpan.Parse("03:30:00"));
              using (SqlDataReader reader = command.ExecuteReader())
              {
                  while (reader.Read())
                  {
                      int runnerId = (int)reader["runner_id"];
                      string fullName = reader["full_name"].ToString();
                      string ageCategory = reader["age_category"].ToString();
                      // Process runner data
                  }
              }
          }
      }

  - question: "Convert this 4GL Insert statement to C#. Respond only in code:
    INSERT INTO race_events (event_name, event_date, distance_km, max_participants)
    VALUES ('City Marathon', '2024-09-15', 42.2, 5000);"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "INSERT INTO race_events (event_name, event_date, distance_km, max_participants)
              VALUES (@eventName, @eventDate, @distanceKm, @maxParticipants)",
              connection))
          {
              command.Parameters.AddWithValue("@eventName", "City Marathon");
              command.Parameters.AddWithValue("@eventDate", new DateTime(2024, 9, 15));
              command.Parameters.AddWithValue("@distanceKm", 42.2);
              command.Parameters.AddWithValue("@maxParticipants", 5000);
              command.ExecuteNonQuery();
          }
      }

  - question: "How would you convert this 4GL Update statement to C#? Respond only in code:
    UPDATE runners SET personal_best = '02:58:30' WHERE runner_id = 1234 AND personal_best > '02:58:30';"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "UPDATE runners SET personal_best = @newBestTime
              WHERE runner_id = @runnerId AND personal_best > @newBestTime",
              connection))
          {
              command.Parameters.AddWithValue("@newBestTime", TimeSpan.Parse("02:58:30"));
              command.Parameters.AddWithValue("@runnerId", 1234);
              command.ExecuteNonQuery();
          }
      }

  - question: "Convert this 4GL Delete statement to C#. Respond only in code:
    DELETE FROM race_registrations WHERE event_id = 5 AND payment_status = 'Unpaid'
    AND registration_date < CURRENT - INTERVAL 7 DAY;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "DELETE FROM race_registrations WHERE event_id = @eventId
              AND payment_status = @paymentStatus AND registration_date < @cutoffDate",
              connection))
          {
              command.Parameters.AddWithValue("@eventId", 5);
              command.Parameters.AddWithValue("@paymentStatus", "Unpaid");
              command.Parameters.AddWithValue("@cutoffDate", DateTime.Now.AddDays(-7));
              command.ExecuteNonQuery();
          }
      }

  - question: "How would you handle this 4GL transaction in C#? Respond only in code:
    BEGIN WORK;
    UPDATE race_events SET current_participants = current_participants + 1 WHERE event_id = 10;
    INSERT INTO race_registrations (runner_id, event_id, registration_date) VALUES (2345, 10, CURRENT);
    COMMIT WORK;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlTransaction transaction = connection.BeginTransaction())
          {
              try
              {
                  using (SqlCommand command = new SqlCommand(
                      "UPDATE race_events SET current_participants = current_participants + 1
                      WHERE event_id = @eventId",
                      connection, transaction))
                  {
                      command.Parameters.AddWithValue("@eventId", 10);
                      command.ExecuteNonQuery();
                  }

                  using (SqlCommand command = new SqlCommand(
                      "INSERT INTO race_registrations (runner_id, event_id, registration_date)
                      VALUES (@runnerId, @eventId, @registrationDate)",
                      connection, transaction))
                  {
                      command.Parameters.AddWithValue("@runnerId", 2345);
                      command.Parameters.AddWithValue("@eventId", 10);
                      command.Parameters.AddWithValue("@registrationDate", DateTime.Now);
                      command.ExecuteNonQuery();
                  }

                  transaction.Commit();
              }
              catch
              {
                  transaction.Rollback();
                  throw;
              }
          }
      }

  - question: "Convert this 4GL error handling to C#. Respond only in code:
    WHENEVER ERROR RAISE
    BEGIN
        LET error_log = 'Error in marathon registration system: ' || SQLERRM;
        INSERT INTO system_logs (log_message, log_date) VALUES (error_log, CURRENT);
        RAISE EXCEPTION error_log;
    END"
    answer: |
      try
      {
          // Marathon registration system operations
      }
      catch (SqlException ex)
      {
          string errorLog = "Error in marathon registration system: " + ex.Message;
          using (SqlConnection connection = new SqlConnection(connectionString))
          {
              connection.Open();
              using (SqlCommand command = new SqlCommand(
                  "INSERT INTO system_logs (log_message, log_date) VALUES (@logMessage, @logDate)",
                  connection))
              {
                  command.Parameters.AddWithValue("@logMessage", errorLog);
                  command.Parameters.AddWithValue("@logDate", DateTime.Now);
                  command.ExecuteNonQuery();
              }
          }
          throw new Exception(errorLog);
      }

  - question: "How would you convert this 4GL FOR loop to C#? Respond only in code:
    FOR result IN SELECT runner_id, finish_time FROM race_results WHERE event_id = 10 ORDER BY finish_time
        DISPLAY result.runner_id, result.finish_time;
    END FOR;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "SELECT runner_id, finish_time FROM race_results WHERE event_id = @eventId ORDER BY finish_time",
              connection))
          {
              command.Parameters.AddWithValue("@eventId", 10);
              using (SqlDataReader reader = command.ExecuteReader())
              {
                  while (reader.Read())
                  {
                      int runnerId = (int)reader["runner_id"];
                      TimeSpan finishTime = (TimeSpan)reader["finish_time"];
                      Console.WriteLine($"Runner ID: {runnerId}, Finish Time: {finishTime}");
                  }
              }
          }
      }

  - question: "Convert this 4GL WHILE loop to C#. Respond only in code:
    LET remaining_slots = 100
    WHILE remaining_slots > 0
        DISPLAY 'Slots available:', remaining_slots
        LET remaining_slots = remaining_slots - 1
    END WHILE;"
    answer: |
      int remainingSlots = 100;
      while (remainingSlots > 0)
      {
          Console.WriteLine($"Slots available: {remainingSlots}");
          remainingSlots--;
      }

  - question: "How would you convert this 4GL conditional statement to C#? Respond only in code:
    IF finish_time < '03:00:00' THEN
        LET award_category = 'Elite'
    ELIF finish_time < '04:00:00' THEN
        LET award_category = 'Advanced'
    ELSE
        LET award_category = 'Finisher'
    END IF;"
    answer: |
      string awardCategory;
      TimeSpan finishTime = TimeSpan.Parse("03:30:00"); // Example finish time

      if (finishTime < TimeSpan.Parse("03:00:00"))
      {
          awardCategory = "Elite";
      }
      else if (finishTime < TimeSpan.Parse("04:00:00"))
      {
          awardCategory = "Advanced";
      }
      else
      {
          awardCategory = "Finisher";
      }

  - question: "Convert this 4GL string concatenation to C#. Respond only in code:
    LET result_summary = runner_name || ' finished in ' || TO_CHAR(finish_time, '%H:%M:%S') || ' (Place: ' ||
    TO_CHAR(place) || ')';"
    answer: |
      string resultSummary = runnerName + " finished in " + 
      finishTime.ToString(@"hh\:mm\:ss") + " (Place: " + place.ToString() + ")";

  - question: "How would you convert this 4GL function call to C#? Respond only in code:
    FUNCTION calculate_age_category(p_birth_date DATE) RETURNS VARCHAR(20)
        LET age = YEAR(CURRENT) - YEAR(p_birth_date)
        IF age < 30 THEN
            RETURN 'Under 30'
        ELIF age < 40 THEN
            RETURN '30-39'
        ELIF age < 50 THEN
            RETURN '40-49'
        ELSE
            RETURN '50+'
        END IF
    END FUNCTION

    LET runner_category = calculate_age_category('1985-05-15');"
    answer: |
      public string CalculateAgeCategory(DateTime birthDate)
      {
          int age = DateTime.Now.Year - birthDate.Year;
          if (birthDate > DateTime.Now.AddYears(-age)) age--;

          if (age < 30)
              return "Under 30";
          else if (age < 40)
              return "30-39";
          else if (age < 50)
              return "40-49";
          else
              return "50+";
      }

      // Usage
      string runnerCategory = CalculateAgeCategory(new DateTime(1985, 5, 15));
