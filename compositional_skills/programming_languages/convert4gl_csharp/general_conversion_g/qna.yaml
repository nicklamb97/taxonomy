version: 2
task_description: Learn about converting Actian 4GL code for OpenROAD to C#.
created_by: nicklamb97
seed_examples:
  - question: "Convert this 4GL Select statement to C#. Respond only in code:
    SELECT employee_id, full_name, salary FROM employees WHERE department = 'Marketing' AND hire_date > '2023-01-01';"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "SELECT employee_id, full_name, salary FROM employees WHERE department = @department AND hire_date > @hireDate",
              connection))
          {
              command.Parameters.AddWithValue("@department", "Marketing");
              command.Parameters.AddWithValue("@hireDate", new DateTime(2023, 1, 1));
              using (SqlDataReader reader = command.ExecuteReader())
              {
                  while (reader.Read())
                  {
                      int employeeId = (int)reader["employee_id"];
                      string fullName = reader["full_name"].ToString();
                      decimal salary = (decimal)reader["salary"];
                      // Process data
                  }
              }
          }
      }

  - question: "How would you convert this 4GL Insert statement to C#? Respond only in code:
    INSERT INTO orders (customer_id, order_date, total_amount) VALUES (1001, CURRENT, 299.99);"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "INSERT INTO orders (customer_id, order_date, total_amount) VALUES (@customerId, @orderDate, @totalAmount)",
              connection))
          {
              command.Parameters.AddWithValue("@customerId", 1001);
              command.Parameters.AddWithValue("@orderDate", DateTime.Now);
              command.Parameters.AddWithValue("@totalAmount", 299.99m);
              command.ExecuteNonQuery();
          }
      }

  - question: "Convert this 4GL Update statement to C#. Respond only in code:
    UPDATE inventory SET stock_level = stock_level - 5 WHERE product_id = 789 AND warehouse_id = 2;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "UPDATE inventory SET stock_level = stock_level - @quantity WHERE product_id = @productId AND warehouse_id = @warehouseId",
              connection))
          {
              command.Parameters.AddWithValue("@quantity", 5);
              command.Parameters.AddWithValue("@productId", 789);
              command.Parameters.AddWithValue("@warehouseId", 2);
              command.ExecuteNonQuery();
          }
      }

  - question: "How would you convert this 4GL Delete statement to C#? Respond only in code:
    DELETE FROM temp_logs WHERE creation_date < CURRENT - INTERVAL '30' DAY;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "DELETE FROM temp_logs WHERE creation_date < @cutoffDate",
              connection))
          {
              command.Parameters.AddWithValue("@cutoffDate", DateTime.Now.AddDays(-30));
              command.ExecuteNonQuery();
          }
      }

  - question: "Convert this 4GL transaction to C#. Respond only in code:
    BEGIN WORK;
    INSERT INTO sales (product_id, quantity, sale_date) VALUES (123, 2, CURRENT);
    UPDATE inventory SET stock_level = stock_level - 2 WHERE product_id = 123;
    COMMIT WORK;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlTransaction transaction = connection.BeginTransaction())
          {
              try
              {
                  using (SqlCommand insertCommand = new SqlCommand(
                      "INSERT INTO sales (product_id, quantity, sale_date) VALUES (@productId, @quantity, @saleDate)",
                      connection, transaction))
                  {
                      insertCommand.Parameters.AddWithValue("@productId", 123);
                      insertCommand.Parameters.AddWithValue("@quantity", 2);
                      insertCommand.Parameters.AddWithValue("@saleDate", DateTime.Now);
                      insertCommand.ExecuteNonQuery();
                  }

                  using (SqlCommand updateCommand = new SqlCommand(
                      "UPDATE inventory SET stock_level = stock_level - @quantity WHERE product_id = @productId",
                      connection, transaction))
                  {
                      updateCommand.Parameters.AddWithValue("@quantity", 2);
                      updateCommand.Parameters.AddWithValue("@productId", 123);
                      updateCommand.ExecuteNonQuery();
                  }

                  transaction.Commit();
              }
              catch
              {
                  transaction.Rollback();
                  throw;
              }
          }
      }

  - question: "How would you convert this 4GL error handling to C#? Respond only in code:
    WHENEVER ERROR
    BEGIN
        LET error_code = SQLCA.SQLCODE;
        LET error_message = SQLCA.SQLERRM;
        CALL log_error(error_code, error_message);
        ROLLBACK WORK;
    END"
    answer: |
      try
      {
          // Database operations
      }
      catch (SqlException ex)
      {
          int errorCode = ex.Number;
          string errorMessage = ex.Message;
          LogError(errorCode, errorMessage);
          
          // If using transactions:
          // transaction.Rollback();
          
          throw;
      }

  - question: "Convert this 4GL FOR loop to C#. Respond only in code:
    FOR cust IN SELECT customer_id, name, email FROM customers WHERE status = 'Active'
        CALL send_newsletter(cust.email);
    END FOR;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "SELECT customer_id, name, email FROM customers WHERE status = @status",
              connection))
          {
              command.Parameters.AddWithValue("@status", "Active");
              using (SqlDataReader reader = command.ExecuteReader())
              {
                  while (reader.Read())
                  {
                      int customerId = (int)reader["customer_id"];
                      string name = reader["name"].ToString();
                      string email = reader["email"].ToString();
                      SendNewsletter(email);
                  }
              }
          }
      }

  - question: "How would you convert this 4GL WHILE loop to C#? Respond only in code:
    LET retry_count = 0;
    WHILE retry_count < 3
        TRY
            CALL process_data();
            EXIT WHILE;
        CATCH
            LET retry_count = retry_count + 1;
        ENDTRY
    END WHILE;"
    answer: |
      int retryCount = 0;
      while (retryCount < 3)
      {
          try
          {
              ProcessData();
              break;
          }
          catch
          {
              retryCount++;
          }
      }

  - question: "Convert this 4GL conditional statement to C#. Respond only in code:
    IF order_total > 1000 THEN
        LET shipping_cost = 0;
    ELIF order_total > 500 THEN
        LET shipping_cost = 5.99;
    ELSE
        LET shipping_cost = 9.99;
    END IF;"
    answer: |
      decimal shippingCost;
      if (orderTotal > 1000)
      {
          shippingCost = 0m;
      }
      else if (orderTotal > 500)
      {
          shippingCost = 5.99m;
      }
      else
      {
          shippingCost = 9.99m;
      }

  - question: "How would you convert this 4GL string concatenation to C#? Respond only in code:
    LET order_summary = order_id || ' - ' || customer_name || ' (' || TO_CHAR(order_date, '%Y-%m-%d') || '): $' || order_total;"
    answer: |
      string orderSummary = $"{orderId} - {customerName} ({orderDate:yyyy-MM-dd}): ${orderTotal:F2}";

  - question: "Convert this 4GL function call to C#. Respond only in code:
    FUNCTION calculate_discount(p_order_total DECIMAL(10,2), p_customer_type CHAR(10)) RETURNS DECIMAL(10,2)
        IF p_customer_type = 'VIP' THEN
            RETURN p_order_total * 0.15;
        ELIF p_customer_type = 'Regular' THEN
            RETURN p_order_total * 0.05;
        ELSE
            RETURN 0;
        END IF;
    END FUNCTION

    LET discount_amount = calculate_discount(500.00, 'VIP');"
    answer: |
      public decimal CalculateDiscount(decimal orderTotal, string customerType)
      {
          switch (customerType)
          {
              case "VIP":
                  return orderTotal * 0.15m;
              case "Regular":
                  return orderTotal * 0.05m;
              default:
                  return 0m;
          }
      }

      // Usage
      decimal discountAmount = CalculateDiscount(500.00m, "VIP");
