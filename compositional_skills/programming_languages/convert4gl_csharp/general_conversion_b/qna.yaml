version: 3
task_description: Learn about converting Actian 4GL code for OpenROAD to C#.
created_by: nicklamb97
seed_examples:
  - question: "How would you convert this 4GL Select statement to C#? Respond only in code:
    SELECT order_id, customer_name, total_amount FROM orders WHERE order_date > '2024-01-01';"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "SELECT order_id, customer_name, total_amount FROM orders WHERE order_date > @orderDate",
              connection))
          {
              command.Parameters.AddWithValue("@orderDate", new DateTime(2024, 1, 1));
              using (SqlDataReader reader = command.ExecuteReader())
              {
                  while (reader.Read())
                  {
                      int orderId = (int)reader["order_id"];
                      string customerName = reader["customer_name"].ToString();
                      decimal totalAmount = (decimal)reader["total_amount"];
                      // Process data
                  }
              }
          }
      }

  - question: "Convert this 4GL Insert statement to C#. Respond only in code:
    INSERT INTO products (product_name, category, price) VALUES ('Smart Watch', 'Wearables', 199.99);"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "INSERT INTO products (product_name, category, price) VALUES (@productName, @category, @price)",
              connection))
          {
              command.Parameters.AddWithValue("@productName", "Smart Watch");
              command.Parameters.AddWithValue("@category", "Wearables");
              command.Parameters.AddWithValue("@price", 199.99m);
              command.ExecuteNonQuery();
          }
      }

  - question: "How would you convert this 4GL Update statement to C#? Respond only in code:
    UPDATE customers SET loyalty_points = loyalty_points + 100 WHERE customer_id = 1234;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "UPDATE customers SET loyalty_points = loyalty_points + @points WHERE customer_id = @customerId",
              connection))
          {
              command.Parameters.AddWithValue("@points", 100);
              command.Parameters.AddWithValue("@customerId", 1234);
              command.ExecuteNonQuery();
          }
      }

  - question: "Convert this 4GL Delete statement to C#. Respond only in code:
    DELETE FROM inventory WHERE expiration_date < CURRENT AND quantity = 0;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "DELETE FROM inventory WHERE expiration_date < @currentDate AND quantity = @quantity",
              connection))
          {
              command.Parameters.AddWithValue("@currentDate", DateTime.Now);
              command.Parameters.AddWithValue("@quantity", 0);
              command.ExecuteNonQuery();
          }
      }

  - question: "How would you handle this 4GL transaction in C#? Respond only in code:
    BEGIN WORK;
    UPDATE accounts SET balance = balance - 500 WHERE account_id = 101;
    UPDATE accounts SET balance = balance + 500 WHERE account_id = 102;
    COMMIT WORK;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlTransaction transaction = connection.BeginTransaction())
          {
              try
              {
                  using (SqlCommand command = new SqlCommand(
                      "UPDATE accounts SET balance = balance - @amount WHERE account_id = @fromAccount",
                      connection, transaction))
                  {
                      command.Parameters.AddWithValue("@amount", 500m);
                      command.Parameters.AddWithValue("@fromAccount", 101);
                      command.ExecuteNonQuery();
                  }

                  using (SqlCommand command = new SqlCommand(
                      "UPDATE accounts SET balance = balance + @amount WHERE account_id = @toAccount",
                      connection, transaction))
                  {
                      command.Parameters.AddWithValue("@amount", 500m);
                      command.Parameters.AddWithValue("@toAccount", 102);
                      command.ExecuteNonQuery();
                  }

                  transaction.Commit();
              }
              catch
              {
                  transaction.Rollback();
                  throw;
              }
          }
      }

  - question: "Convert this 4GL error handling to C#. Respond only in code:
    WHENEVER ERROR RAISE
    BEGIN
        LET error_message = SQLERRM;
        RAISE EXCEPTION error_message;
    END"
    answer: |
      try
      {
          // Database operations
      }
      catch (SqlException ex)
      {
          string errorMessage = ex.Message;
          throw new Exception(errorMessage);
      }

  - question: "How would you convert this 4GL FOR loop to C#? Respond only in code:
    FOR emp IN SELECT employee_id, first_name, last_name FROM employees WHERE department = 'Sales'
        DISPLAY emp.employee_id, emp.first_name, emp.last_name;
    END FOR;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "SELECT employee_id, first_name, last_name FROM employees WHERE department = @department",
              connection))
          {
              command.Parameters.AddWithValue("@department", "Sales");
              using (SqlDataReader reader = command.ExecuteReader())
              {
                  while (reader.Read())
                  {
                      int employeeId = (int)reader["employee_id"];
                      string firstName = reader["first_name"].ToString();
                      string lastName = reader["last_name"].ToString();
                      Console.WriteLine($"{employeeId} {firstName} {lastName}");
                  }
              }
          }
      }

  - question: "Convert this 4GL WHILE loop to C#. Respond only in code:
    LET attempts = 3
    WHILE attempts > 0
        DISPLAY 'Attempts left:', attempts
        LET attempts = attempts - 1
    END WHILE;"
    answer: |
      int attempts = 3;
      while (attempts > 0)
      {
          Console.WriteLine($"Attempts left: {attempts}");
          attempts--;
      }

  - question: "How would you convert this 4GL conditional statement to C#? Respond only in code:
    IF customer_type = 'VIP' THEN
        LET discount_rate = 0.15
    ELIF customer_type = 'Regular' THEN
        LET discount_rate = 0.05
    ELSE
        LET discount_rate = 0
    END IF;"
    answer: |
      decimal discountRate;
      if (customerType == "VIP")
      {
          discountRate = 0.15m;
      }
      else if (customerType == "Regular")
      {
          discountRate = 0.05m;
      }
      else
      {
          discountRate = 0m;
      }

  - question: "Convert this 4GL string concatenation to C#. Respond only in code:
    LET full_name = first_name || ' ' || last_name || ' (' || TO_CHAR(birth_date, '%Y-%m-%d') || ')';"
    answer: |
      string fullName = firstName + " " + lastName + " (" + birthDate.ToString("yyyy-MM-dd") + ")";

  - question: "How would you convert this 4GL function call to C#? Respond only in code:
    FUNCTION calculate_total_price(p_quantity INTEGER, p_unit_price DECIMAL(10,2)) RETURNS DECIMAL(10,2)
        RETURN p_quantity * p_unit_price
    END FUNCTION

    LET total = calculate_total_price(5, 19.99);"
    answer: |
      public decimal CalculateTotalPrice(int quantity, decimal unitPrice)
      {
          return quantity * unitPrice;
      }

      // Usage
      decimal total = CalculateTotalPrice(5, 19.99m);
