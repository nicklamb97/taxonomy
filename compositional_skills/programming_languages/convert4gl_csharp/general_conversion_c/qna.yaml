version: 2
task_description: Learn about converting Actian 4GL code for OpenROAD to C#.
created_by: nicklamb97
seed_examples:
  - question: "Convert this 4GL Select statement to C#. Respond only in code:
    SELECT employee_id, last_name, salary FROM employees WHERE department_id = 10 AND hire_date > '2023-01-01';"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "SELECT employee_id, last_name, salary FROM employees WHERE department_id = @deptId AND hire_date > @hireDate",
              connection))
          {
              command.Parameters.AddWithValue("@deptId", 10);
              command.Parameters.AddWithValue("@hireDate", new DateTime(2023, 1, 1));
              using (SqlDataReader reader = command.ExecuteReader())
              {
                  while (reader.Read())
                  {
                      int employeeId = (int)reader["employee_id"];
                      string lastName = reader["last_name"].ToString();
                      decimal salary = (decimal)reader["salary"];
                      // Process data
                  }
              }
          }
      }

  - question: "How would you convert this 4GL Insert statement to C#? Respond only in code:
    INSERT INTO departments (department_name, manager_id, location_id) VALUES ('Research', 103, 1700);"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "INSERT INTO departments (department_name, manager_id, location_id) VALUES (@deptName, @managerId, @locationId)",
              connection))
          {
              command.Parameters.AddWithValue("@deptName", "Research");
              command.Parameters.AddWithValue("@managerId", 103);
              command.Parameters.AddWithValue("@locationId", 1700);
              command.ExecuteNonQuery();
          }
      }

  - question: "Convert this 4GL Update statement to C#. Respond only in code:
    UPDATE projects SET status = 'Completed', end_date = CURRENT WHERE project_id = 501;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "UPDATE projects SET status = @status, end_date = @endDate WHERE project_id = @projectId",
              connection))
          {
              command.Parameters.AddWithValue("@status", "Completed");
              command.Parameters.AddWithValue("@endDate", DateTime.Now);
              command.Parameters.AddWithValue("@projectId", 501);
              command.ExecuteNonQuery();
          }
      }

  - question: "How would you convert this 4GL Delete statement to C#? Respond only in code:
    DELETE FROM temp_logs WHERE log_date < ADD_MONTHS(CURRENT, -6);"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "DELETE FROM temp_logs WHERE log_date < @cutoffDate",
              connection))
          {
              command.Parameters.AddWithValue("@cutoffDate", DateTime.Now.AddMonths(-6));
              command.ExecuteNonQuery();
          }
      }

  - question: "Convert this 4GL transaction to C#. Respond only in code:
    BEGIN WORK;
    INSERT INTO orders (customer_id, order_date, total_amount) VALUES (1001, CURRENT, 1500.00);
    UPDATE inventory SET stock_quantity = stock_quantity - 5 WHERE product_id = 101;
    COMMIT WORK;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlTransaction transaction = connection.BeginTransaction())
          {
              try
              {
                  using (SqlCommand insertCommand = new SqlCommand(
                      "INSERT INTO orders (customer_id, order_date, total_amount) VALUES (@customerId, @orderDate, @totalAmount)",
                      connection, transaction))
                  {
                      insertCommand.Parameters.AddWithValue("@customerId", 1001);
                      insertCommand.Parameters.AddWithValue("@orderDate", DateTime.Now);
                      insertCommand.Parameters.AddWithValue("@totalAmount", 1500.00m);
                      insertCommand.ExecuteNonQuery();
                  }

                  using (SqlCommand updateCommand = new SqlCommand(
                      "UPDATE inventory SET stock_quantity = stock_quantity - @quantity WHERE product_id = @productId",
                      connection, transaction))
                  {
                      updateCommand.Parameters.AddWithValue("@quantity", 5);
                      updateCommand.Parameters.AddWithValue("@productId", 101);
                      updateCommand.ExecuteNonQuery();
                  }

                  transaction.Commit();
              }
              catch
              {
                  transaction.Rollback();
                  throw;
              }
          }
      }

  - question: "How would you handle this 4GL error management in C#? Respond only in code:
    WHENEVER ERROR
    BEGIN
        LET err_code = SQLCA.SQLCODE;
        LET err_msg = SQLCA.SQLERRM;
        CALL log_error(err_code, err_msg);
        RAISE EXCEPTION err_msg;
    END"
    answer: |
      try
      {
          // Database operations
      }
      catch (SqlException ex)
      {
          int errorCode = ex.Number;
          string errorMessage = ex.Message;
          LogError(errorCode, errorMessage);
          throw new Exception(errorMessage);
      }

  - question: "Convert this 4GL FOR loop to C#. Respond only in code:
    FOR cust IN SELECT customer_id, company_name, credit_limit FROM customers WHERE country = 'USA'
        IF cust.credit_limit > 100000 THEN
            DISPLAY cust.company_name, ' is a high-value customer';
        END IF;
    END FOR;"
    answer: |
      using (SqlConnection connection = new SqlConnection(connectionString))
      {
          connection.Open();
          using (SqlCommand command = new SqlCommand(
              "SELECT customer_id, company_name, credit_limit FROM customers WHERE country = @country",
              connection))
          {
              command.Parameters.AddWithValue("@country", "USA");
              using (SqlDataReader reader = command.ExecuteReader())
              {
                  while (reader.Read())
                  {
                      int customerId = (int)reader["customer_id"];
                      string companyName = reader["company_name"].ToString();
                      decimal creditLimit = (decimal)reader["credit_limit"];

                      if (creditLimit > 100000)
                      {
                          Console.WriteLine($"{companyName} is a high-value customer");
                      }
                  }
              }
          }
      }

  - question: "How would you convert this 4GL WHILE loop to C#? Respond only in code:
    LET retry_count = 0;
    WHILE connection_status != 'Connected' AND retry_count < 5
        CALL attempt_connection();
        LET retry_count = retry_count + 1;
        IF retry_count = 5 THEN
            DISPLAY 'Max retries reached';
        END IF;
    END WHILE;"
    answer: |
      int retryCount = 0;
      string connectionStatus = "";

      while (connectionStatus != "Connected" && retryCount < 5)
      {
          AttemptConnection();
          retryCount++;

          if (retryCount == 5)
          {
              Console.WriteLine("Max retries reached");
          }
      }

  - question: "Convert this 4GL conditional statement to C#. Respond only in code:
    IF order_total > 1000 THEN
        IF customer_type = 'Premium' THEN
            LET discount = 0.15;
        ELSE
            LET discount = 0.10;
        END IF;
    ELSE
        LET discount = 0.05;
    END IF;"
    answer: |
      decimal discount;

      if (orderTotal > 1000)
      {
          if (customerType == "Premium")
          {
              discount = 0.15m;
          }
          else
          {
              discount = 0.10m;
          }
      }
      else
      {
          discount = 0.05m;
      }

  - question: "How would you convert this 4GL string manipulation to C#? Respond only in code:
    LET full_address = NVL(street_address, '') || ', ' || city || ', ' || state || ' ' || zip_code;"
    answer: |
      string fullAddress = string.Format("{0}, {1}, {2} {3}",
          string.IsNullOrEmpty(streetAddress) ? "" : streetAddress,
          city,
          state,
          zipCode);

  - question: "Convert this 4GL function definition and call to C#. Respond only in code:
    FUNCTION calculate_age(birth_date DATE) RETURNS INTEGER
        RETURN (CURRENT - birth_date) UNITS YEAR;
    END FUNCTION

    LET employee_age = calculate_age('1990-05-15');"
    answer: |
      public int CalculateAge(DateTime birthDate)
      {
          return (int)((DateTime.Now - birthDate).TotalDays / 365.25);
      }

      // Usage
      int employeeAge = CalculateAge(new DateTime(1990, 5, 15));
