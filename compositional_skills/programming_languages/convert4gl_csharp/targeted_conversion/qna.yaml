version: 3
task_description: Learn about converting Actian 4GL SELECT statements for OpenROAD to C#.
created_by: guyvernon
seed_examples:
  - question: "How would you convert the following Actian 4GL code to c#? Respond only in code:
    PROCEDURE GetObject
    (

        /* Input */
        ObjectNo = INTEGER    NOT NULL;
        Status     = VARCHAR(1) NOT NULL;

        /* Output */
        Result     = tpo_object;

    ) =
    DECLARE

        return_no     = INTEGER      NOT NULL;
        return_msg = VARCHAR(100) NOT NULL;

        BOObject   = bo_object;

    ENDDECLARE
    BEGIN


        /*--------------------------------------------------------------------------------------------*/
        /* Validation                                                                                 */
        /*--------------------------------------------------------------------------------------------*/

        /* Validate the ObjectNo exists. */

        return_msg = '';

        IF ObjectNo = 0
        THEN
            CurUserSession.ValidateFatal( msg = 'Object Number must be set.');
        ENDIF;

        IF ObjectDAO.ValidateObjectNo (object_no = ObjectNo,
                                           msg         = BYREF(return_msg)) != ER_OK THEN
            CurUserSession.ValidateFatal( msg = return_msg );
        ENDIF;

        /* Retrieve the object */

        return_no = ObjectDAO.GetObject (object_no = ObjectNo,
                                              status      = Status,
                                              object    = BYREF(BOObject));

        /* Set the return TPO and report if empty list */

        Result = Mapper.ToObjectTPO( bo = BOObject );

    END;"
    answer: |
      // API Endpoint - GetObject
      [HttpGet("GetObject/{objectNo:int}/{status}")]
      public async Task<ActionResult<NotificationTPO<ObjectTPO>>> GetObject(int objectNo, string status)
      {
          StringBuilder logMessage = new StringBuilder();
          logMessage.AppendLine(StringFunctions
          .LogStringBuilder($"GetObject Started objectNo={objectNo}, status={status}"));

          await _objectDAO.ValidateObjectNo(objectNo);
          var serviceResponse = new NotificationTPO<ObjectTPO>();
          bool success = true;
          try
          {
              await _dbConnection.OpenConnectionWithTransaction();
              ObjectBO object = await _objectData.GetObject(_dbConnection, objectNo, status);
              serviceResponse.Result = _objectMapper.ToObjectTPO(object);
          }
          catch (Exception e)
          {
              success = false;
              //do not wait for response and continue
              _ = _dbConnection.Rollback();
              logMessage.AppendLine(StringFunctions
              .LogStringBuilder($"GetObject Started objectNo={objectNo}, status={status}"));
              throw new Exception(e.Message, e);
          }
          finally
          {
              if (success) { await _dbConnection.CommitAndClose(); }
              logMessage.AppendLine(StringFunctions.LogStringBuilder("GetObject finished"));
              _logger.LogInformation(logMessage.ToString());
          }
          return Ok(serviceResponse);
      }
  - question: "How would you convert the following Actian 4GL code to c#? Respond only in code:
    METHOD GetObject
    (
        object_no = INTEGER    NOT NULL;
        status  	  = VARCHAR(1) NOT NULL;

        object    = bo_object;
    )=
    DECLARE

        rowcount = INTEGER      NOT NULL;
        l_where	 = VARCHAR(100) NOT NULL;

    ENDDECLARE
    BEGIN

        l_where = ' object_no = ' + VARCHAR(object_no);

        IF status <> '' THEN
            l_where = l_where + ' AND object_status = ' + HC_QUOTE + status + HC_QUOTE;
        ENDIF;

        SELECT object_no		AS object.object_no,
           object_name		AS object.object_name,
           object_status		AS object.object_status,
           object_editcounter	AS object.object_editcounter
        FROM object
        WHERE :l_where;

        IF sql_check(rowcount = BYREF(rowcount)) <> ER_OK THEN
            RETURN ER_FAIL;
        ENDIF;

        COMMIT;

    END;"
    answer: |
      // Get object SQL calls
      public async Task<ObjectBO> GetObject(ConnectionHelper connection, int objectNo, string status)
      {
          if (!connection.IsConnectionOpen())
              throw new Exception("GetObject tried to use a closed connection ");

          string fromQuery = "object f";
          string whereQuery = $"f.object_no={objectNo} ";

          if (!string.IsNullOrEmpty(status))
          {
              whereQuery = $" {whereQuery} AND f.object_status='{status}'";
          }

          string squery = $"select f.object_no, f.object_name, f.object_status, f.object_editcounter"
          + $"from {fromQuery} where {whereQuery}";

          ObjectBO objects = new ObjectBO();
          try
          {
              DbCommand dbCommand = connection.GetCommand();
              dbCommand.CommandText = squery;
              var reader = await dbCommand.ExecuteReaderAsync();
              while (reader.Read())
              {
                  if (!reader.IsDBNull(0))
                  {
                      objects = new ObjectBO()
                      {
                          object_no = reader.IsDBNull(0) ? 0 : reader.GetInt32("object_no"),
                          object_name = reader.IsDBNull(1) ? string.Empty : reader.GetString("object_name"),
                          object_status = reader.IsDBNull(2) ? string.Empty : reader.GetString("object_status"),
                          object_editcounter = reader.IsDBNull(3) ? 0 : reader.GetInt32("object_editcounter")
                      };
                  }

              }
          }
          catch (Exception e)
          {

              _logger.LogError("Error from class ObjectData - method GetObject");
              throw new Exception(e.Message, e);
          }

          return objects;
      }
  - question: "How would you convert the following Actian 4GL code to c#? Respond only in code:
    SCP_GetFoo:

        /* Input */
        FooNo = INTEGER NOT NULL;
        Status = VARCHAR(1) NOT NULL;

        /* Output */
        Result = tpo_foo_detail;

        IF FooNo = 0
        THEN
        CurUserSession.ValidateFatal( msg = 'Foo Number must be set.');
        ENDIF;

        IF FooDAO.ValidateFooNo (p_msg      = ByRef(l_return_msg),
                                     p_foo_no = FooNo) != ER_OK THEN
            CurUserSession.ValidateFatal( msg = l_return_msg );
        ENDIF;

        /* Fatal error if any validation errors */

        IF CurNotifications.hasValidationNotifications = TRUE THEN
            CurUserSession.ValidateFatal( msg = 'Validation notifications.');
        ENDIF;

        /* Retrieve the foo */
        l_return = FooDAO.GetFoo (p_foo_no = FooNo,
                        p_foo    = BYREF(l_bo),
                        p_status   = Status);

        IF l_return <> ER_OK THEN
            CurUserSession.ValidateFatal(msg = 'Error occurred getting foo ['
                                             + VARCHAR(FooNo)
                                             + ']'  );
        ENDIF;

        /* Set the return TPO and report if empty list */
        Result = Mapper.ToFooTPO( bo = l_bo );"
    answer: |
      // API Endpoint - GetFoo
      [HttpGet("GetFoo/{fooNo:int}/{status}")]
      public async Task<ActionResult<NotificationTPO<FooTPO>>> GetFoo(int fooNo, string status)
      {
          StringBuilder logMessage = new StringBuilder();
          logMessage.AppendLine(StringFunctions.LogStringBuilder($"GetFoo Started fooNo={fooNo}, status={status}"));

          await _fooDAO.ValidateFooNo(fooNo);
          var serviceResponse = new NotificationTPO<FooTPO>();
          bool success = true;
          try
          {
              await _dbConnection.OpenConnectionWithTransaction();
              FooBO foo = await _fooData.GetFoo(_dbConnection, fooNo, status);
              serviceResponse.Result = _fooMapper.ToFooTPO(foo);
          }
          catch (Exception e)
          {
              success = false;
              //do not wait for response and continue
              _ = _dbConnection.Rollback();
              logMessage.AppendLine(StringFunctions.LogStringBuilder($"GetFoo Started fooNo={fooNo}, status={status}"));
              throw new Exception(e.Message, e);
          }
          finally
          {
              if (success) { await _dbConnection.CommitAndClose(); }
              logMessage.AppendLine(StringFunctions.LogStringBuilder("GetFoo finished"));
              _logger.LogInformation(logMessage.ToString());
          }
          return Ok(serviceResponse);
      }

  - question: "How would you convert the following Actian 4GL code to c#? Respond only in code:
    METHOD ValidateFooNo
    (
        p_foo_no       = INTEGER      NOT NULL;

        p_footype_code = VarChar(1)   NOT NULL;
        p_msg            = VarChar(200) NOT NULL;
    )=
    Declare

        l_foo_no   = INTEGER NOT NULL;
        l_rowcount = INTEGER NOT NULL;
        l_status   = INTEGER NOT NULL;

    EndDeclare
    Begin

        SELECT foo_no       AS :l_foo_no,
               footype_code AS :p_footype_code
        FROM foo
        WHERE foo_no = :p_foo_no;

        l_status = CALLPROC sql_check(rowcount = BYREF(l_rowcount));

        IF l_status <> ER_OK THEN
            RETURN ER_FAIL;
        ENDIF;

        IF (l_rowcount = 0) THEN
        p_msg = 'Foo number not found in TmsFoo table.';
        RETURN ER_FAIL;
        END

IF;

        RETURN ER_OK;
    End"
    answer: |
      public async Task<bool> ValidateFooNo(int fooNo)
      {
          var query = $"SELECT foo_no, footype_code FROM foo WHERE foo_no = {fooNo}";
          bool fooExists = false;
          try
          {
              using (var connection = new SqlConnection(_connectionString))
              {
                  await connection.OpenAsync();
                  using (var command = new SqlCommand(query, connection))
                  {
                      using (var reader = await command.ExecuteReaderAsync())
                      {
                          fooExists = reader.HasRows;
                      }
                  }
              }
              if (!fooExists)
              {
                  throw new Exception("Foo number not found in TmsFoo table.");
              }
          }
          catch (Exception ex)
          {
              _logger.LogError($"Error validating foo number {fooNo}: {ex.Message}");
              throw;
          }

          return fooExists;
      }
  - question: "How would you convert the following Actian 4GL code into c#? Respond only in code:
    METHOD GetFoo
    (
        p_foo_no       = INTEGER    NOT NULL;
        p_status         = VARCHAR(1) NOT NULL;

        p_foo          = bo_foo;
    )=
    DECLARE

        l_status	           = INTEGER NOT NULL;
        l_rowcount           = INTEGER NOT NULL;
        l_i		           = INTEGER NOT NULL;
        l_where	           = VARCHAR(100) NOT NULL;

        l_bo_arr_bar_object = ARRAY OF bo_barobject DEFAULT NULL;
        l_bo_barobject      = bo_barobject          DEFAULT NULL;

    ENDDECLARE
    BEGIN

        l_where = ' foo_no = ' + VARCHAR(p_foo_no);

        IF p_status <> '' THEN
            l_where = l_where + ' AND foo_status = ' + HC_QUOTE + p_status + HC_QUOTE;
        ENDIF;

        SELECT t.foo_no				AS p_foo.foo_no,
    	   t.foo_name				AS p_foo.foo_name,
    	   t.foo_webname				AS p_foo.foo_webname,
    	   t.footype_code				AS p_foo.footype_code,
    	   v.footype_name				AS p_foo.footype_name,
        FROM foo t
        JOIN footype v
        ON t.footype_code = v.footype_code
        LEFT JOIN fooparkingtype p
        ON t.fooparkingtype_code = p.fooparkingtype_code
        LEFT JOIN unit u
        ON t.unit_no = u.unit_no
        JOIN region r
        ON t.region_no = r.region_no
        WHERE :l_where;

        l_status = CALLPROC sql_check(rowcount = BYREF(l_rowcount));

        IF l_status <> ER_OK THEN
            RETURN ER_FAIL;
        ENDIF;
        IF l_rowcount = 0 THEN
            RETURN ER_OK;
        ENDIF;

        IF p_foo.qux_code != '' THEN

            SELECT p_foo.qux_name = s.qux_name
            FROM qux s
            WHERE s.qux_code = :p_foo.qux_code;

            IF sql_check() <> ER_OK THEN
                RETURN ER_FAIL;
            ENDIF;

        ENDIF;

        IF BarDAO.GetBarList(
                p_foo_no  = p_foo.foo_no,
                p_bar_list = BYREF(p_foo.arr_foo_bar)) != ER_OK THEN

            RETURN ER_FAIL;
        ENDIF;
        FOR l_i = 1 TO p_foo.arr_foo_bar.LastRow DO
            l_bo_arr_bar_object = p_foo.arr_foo_bar[l_i].arr_bar_object;
            l_bo_barobject = bo_barobject.Create();
            l_bo_barobject.bar_no = p_foo.arr_foo_bar[l_i].bar_no; 
            SELECT f.object_no   AS :l_bo_barobject.object_no,
            FROM object     f
            JOIN barobject rf
            ON rf.object_no = f.object_no
            WHERE rf.bar_no = :l_bo_barobject.bar_no
            BEGIN
                l_bo_arr_bar_object.InsertRow(rowobject = l_bo_barobject.Duplicate());
            END;

            IF sql_check(rowcount = BYREF(l_rowcount)) <> ER_OK THEN
                RETURN ER_FAIL;
            ENDIF;

            l_bo_arr_bar_object = NULL;
            l_bo_barobject      = NULL;

        ENDFOR;
    END;"
    answer: |
      public async Task<FooBO> GetFoo (ConnectionHelper connection, int fooNo, string status)
      {
          if(!connection.IsConnectionOpen())
              throw new Exception("GetFoo tried to use a closed connection");

          string fromQuery = "foo t ";
          string whereQuery = $" foo_no {fooNo}"

          if(status != '')
          {
              whereQuery += $" AND foo_status = '{status}'"
          }
          string joinQuery = "JOIN footype v ON t.footype_code = v.footype_code LEFT JOIN fooparkingtype p ON" +
          "t.fooparkingtype_code LEFT JOIN unit u ON t.unit_no = u.unit_no JOIN region r ON t.region_no = r.region_no "

          string squery = $"SELECT t.foo_no, t.foo_name, t.foo_webname, t.footype_code, t.foo_planned,t.foo_max,"+
          "t.unit_no, IFNULL(u.unit_name, ''),t.qux_code" +
          $"from {fromQuery}{joinQuery}{whereQuery};"

          FooBO foo;
          try
          {
              DbCommand dbCommand = connection.GetCommand();
              dbCommand.CommandText = squery;
              var reader = await dbCommand.ExecuteReaderAsync();
              while (reader.Read())
              {
                  if(!reader.IsDBNull(0))
                  {
                      foo = new FooBO()
                      {
                          foo_no = reader.IsDBNull(0) ? 0 : reader.GetInt32("foo_no"),
                          foo_name = reader.IsDBNull(1) ? string.Empty : reader.GetString("foo_name"),
                          foo_webname  = reader.IsDBNull(2) ? string.Empty : reader.GetString("foo_webname"),
                          footype_code = reader.IsDBNull(3) ? string.Empty : reader.GetString("footype_code"),
                          footype_name = reader.IsDBNull(4) ? string.Empty : reader.GetString("footype_name"),
                      };
                  }
              }
          }
          catch (Exception e)
          {
               throw new Exception(e.Message, e);
          }

          if (foo.qux_code != '')
          {
              squery = $"SELECT {foo.qux_code} = s.qux_name FROM qux s WHERE s.qux_code = {foo.qux_code};"
              try
              {
                  DbCommand dbCommand = connection.GetCommand();
                  dbCommand.CommandText = squery;
                  var reader = await dbCommand.ExecuteReaderAsync();
                  while (reader.read())
                  {
                      if(reader.IsDBNull(0))
                      {
                          foo.qux_code = reader.IsDBNull(0) ? string.Empty : reader.GetString("qux_code")
                      };
                  }
              }
              catch (Exception e)
              {
                  throw new Exception(e.Message, e);
              }
          }
          foo.arr_foo_bar = await GetBarList(connection, fooNo, status);

          foreach(FooBarBO iFooBar in foo.arr_foo_bar)
          {
              List<BarObjectBO> arrBarObjectBO = new List<BarObjectBO>;
              string fromQuery4 = " object f";
              string joinQuery4 = " JOIN barobject rf ON rf.object_no = f.object_no";
              string whereQuery4 = $" rf.bar_no = {foo.arr_foo_bar.bar_no}";

              string squery4 = $"SELECT f.object_no, f.object_name, 2 from{fromQuery4}{joinQuery4}{whereQuery4}";
              try
              {
                  DbCommand dbCommand = connection.GetCommand();
                  dbCommand.CommandText = squery4;
                  var reader = await dbCommand.ExecuteReaderAsync();
                  while(reader.read())
                  {
                      if(reader.IsDBNull(0))
                      {
                          BarObjectBO barObjectBO = new BarObjectBO()
                          {
                              bar_no = foo.arr_foo_bar.bar_no,
                              object_no = reader.IsDBNull(0) ? 0 : reader.GetInt32("object_no"),
                          };
                          arrBarObjectBO.add(barObjectBO);
                      }
                  }
                  iFooBar.arr_bar_object = arrBarObjectBO
              }
              catch (Exception e)
              {
                  throw new Exception(e.Message, e);
              }
          }
          return foo;
      }
  - question: "How would you convert the following Actian 4GL code into c#? Respond only in code:
    Method GetBarList
    (
        p_foo_no  = INTEGER    NOT NULL;
        p_status    = VARCHAR(1) NOT NULL;

        p_bar_list = ARRAY OF bo_foobar;
    )=
    DECLARE

        l_rowcount = INTEGER NOT NULL;
        l_i		 = INTEGER NOT NULL;
        l_where	 = VARCHAR(100) NOT NULL;

    ENDDECLARE
    BEGIN

        l_where = ' 1=1';

        IF p_foo_no != 0 THEN
            l_where = l_where + ' AND r.foo_no = ' + VARCHAR(p_foo_no);
        ENDIF;

        IF p_status <> '' THEN
            l_where = l_where + ' AND r.bar_status = ' + HC_QUOTE + p_status + HC_QUOTE;
        ENDIF;

        l_i = 1;
        SELECT v.foo_name		 AS p_bar_list[l_i].foo_name,
               v.foo_no		 AS p_bar_list[l_i].foo_no,
               r.bar_no			 AS p_bar_list[l_i].bar_no,
               r.bar_name		 AS p_bar_list[l_i].bar_name,
               r.bar_max	 AS p_bar_list[l_i].bar_max,
               r.bar_specialnotes	 AS p_bar_list[l_i].bar_specialnotes,
               r.bar_dayprice	 	 AS p_bar_list[l_i].bar_dayprice,
               r.bar_daycost		 AS p_bar_list[l_i].bar_daycost,
               r.bar_status		 AS p_bar_list[l_i].bar_status,
               r.qux_code		 AS p_bar_list[l_i].qux_code,
               r.quxorbaz_id		 AS p_bar_list[l_i].quxorbaz_id,
               IFNULL(s.qux_name, '') AS p_bar_list[l_i].qux_name,
               r.bar_editcounter	 AS p_bar_list[l_i].bar_editcounter,
               2                     	 AS p_bar_list[l_i].state
        FROM foo v
        JOIN bar  r
        ON   v.foo_no = r.foo_no
        LEFT JOIN qux s
        ON   r.qux_code = s.qux_code
        WHERE :l_where
        BEGIN
            l_i = l_i + 1;
        END;

        IF sql_check(rowcount = BYREF(l_rowcount)) <> ER_OK THEN
            RETURN ER_FAIL;
        ENDIF;

    END;"
    answer: |
      public async Task<List<FooBarBO>> GetBarList(ConnectionHelper connection, int fooNo, string status)
      {
          if(!connection.IsConnectionOpen())
              throw new Exception("GetBarList tried to use a closed connection");

          string whereQuery3 = " 1=1";
          string fromQuery3 = " foo v";
          string joinQuery3 = " JOIN bar r ON v.foo_no = r.foo_no LEFT JOIN qux s ON r.qux_code = s.qux_code";

          if(fooNo !=0)
          {
              whereQuery3 += $" AND r.foo_no = {fooNo}";
          }

          if(!string.IsNullOrEmpty(status))
          {
              whereQuery3 += $" AND r.bar_status = '{status}'";
          }

          string squery3 = $"SELECT v.foo_name, v.foo_no, r.bar_no, r.bar_name, r.bar_max, r.bar_specialnotes," +
          "r.bar_dayprice, r.bar_daycost, r.bar_status, r.qux_code, r.quxorbaz_id, IFNULL(s.qux_name, '')," +
          $"r.bar_editcounter, 2 FROM {fromQuery3}{joinQuery3} WHERE {whereQuery3};";
          List<FooBarBO> fooBars = new List<FooBarBO>();

          try
          {
              DbCommand dbCommand = connection.GetCommand();
              dbCommand.CommandText = squery3;
              var reader = await dbCommand.ExecuteReaderAsync();

              while(reader.Read())
              {
                  if(!reader.IsDBNull(0))
                  {
                      FooBarBO fooBar = new FooBarBO()
                      {
                          foo_name = reader.IsDBNull(0) ? string.Empty : reader.GetString(0),
                          foo_no = reader.IsDBNull(1) ? 0 : reader.GetInt32(1),
                          bar_no = reader.IsDBNull(2) ? 0 : reader.GetInt32(2),
                          bar_name = reader.IsDBNull(3) ? string.Empty : reader.GetString(3),
                          bar_max = reader.IsDBNull(4) ? string.Empty : reader.GetString(4),
                          bar_specialnotes = reader.IsDBNull(5) ? string.Empty : reader.GetString(5),
                          bar_dayprice = reader.IsDBNull(6) ? 0m : reader.GetDecimal(6),
                          bar_daycost = reader.IsDBNull(7) ? 0m : reader.GetDecimal(7),
                          bar_status = reader.IsDBNull(8) ? string.Empty : reader.GetString(8),
                          qux_code = reader.IsDBNull(9) ? string.Empty : reader.GetString(9),
                          quxorbaz_id = reader.IsDBNull(10) ? 0 : reader.GetInt32(10),
                          qux_name = reader.IsDBNull(11) ? string.Empty : reader.GetString(11),
                          bar_editcounter = reader.IsDBNull(12) ? 0 : reader.GetInt32(12),
                          state = 2
                      };
                      fooBars.Add(fooBar);
                  }
              }

          }
          catch (Exception e)
          {
              _logger.LogError("Error from class FooData - method GetBarList");
              throw new Exception(e.Message, e);
          }

          return fooBars;
      }

  - question: "How would you convert the following Actian 4GL code to c#? Respond only in code:
    METHOD ToFooTPO
    (
        bo = bo_foo;
    )=
    DECLARE
        l_tpo		= tpo_foo_detail;
        l_tpo_foobody	= tpo_foobody;
        l_tpo_foobar	= tpo_foobar;
        l_tpo_barobject  = tpo_barobject;

        l_bo_barobject   = bo_barobject DEFAULT NULL;

        i                   = INTEGER NOT NULL;
        j                   = INTEGER NOT NULL;
    ENDDECLARE
    BEGIN
        l_tpo.FooNo		= bo.foo_no;
        l_tpo.FooName		= bo.foo_name;
        l_tpo.WebName		= bo.foo_webname;
        l_tpo.TypeCode		= bo.footype_code;
        l_tpo.TypeName		= bo.footype_name;

        l_tpo.quxCode        = bo.qux_code;
        l_tpo.quxorbazId         = bo.quxorbaz_id;
        l_tpo.QuxName          = bo.qux_name;

        // Body
        FOR i = 1 TO bo.arr_foo_body.LastRow
        DO
            l_tpo_foobody.FooNo		= bo.arr_foo_body[i].foo_no;
            l_tpo_foobody.BodyNo		= bo.arr_foo_body[i].body_no;
            l_tpo_foobody.BodyName	= bo.arr_foo_body[i].body_name;

            l_tpo.ArrFooBody.InsertRow( RowObject = l_tpo_foobody.Duplicate() );
        ENDFOR;

        // Bar
        FOR i = 1 TO bo.arr_foo_bar.LastRow
        DO
            l_tpo_foobar.FooNo		= bo.arr_foo_bar[i].foo_no;
            l_tpo_foobar.No		= bo.arr_foo_bar[i].bar_no;
            l_tpo_foobar.Name		= bo.arr_foo_bar[i].bar_name;
            l_tpo_foobar.quxCode  = bo.arr_foo_bar[i].qux_code;
            l_tpo_foobar.QuxName    = bo.arr_foo_bar[i].qux_name;

            l_tpo.ArrFooBar.InsertRow( RowObject = l_tpo_foobar.Duplicate() );

            // Objects linked to a bar, e.g. an overhead projector

            FOR j = 1 TO bo.arr_foo_bar[i].arr_bar_object.LastRow
            DO
                l_bo_barobject = bo.arr_foo_bar[i].arr_bar_object[j];

                l_tpo_barobject.No           = l_bo_barobject.bar_no;
                l_tpo_barobject.ObjectNo   = l_bo_barobject.object_no;
                l_tpo_barobject.ObjectName = l_bo_barobject.object_name;

                l_tpo.ArrFooBar[1].ArrBarObject.InsertRow( RowObject = l_tpo_barobject.Duplicate() );
            ENDFOR;

        ENDFOR;

        RETURN l_tpo;

    END"
    answer: |
      public FooDetailTPO ToFooTPO(FooBO bo)
      {
          FooDetailTPO tpo = new FooDetailTPO()
          {
              FooNo = bo.foo_no,
              FooName = bo.foo_name,
              WebName = bo.foo_webname,
              TypeCode = bo.footype_code,
              TypeName = bo.footype_name,

              QuxCode = bo.qux_code,
              quxorbazId = bo.quxorbaz_id,
              QuxName = bo.qux_name,
          };

          List<FooBodyTPO> fooBodies = new List<FooBodyTPO>();
          foreach (var body in bo.arr_foo_body)
          {
              FooBodyTPO fooBody = new FooBodyTPO()
              {
                  FooNo = body.foo_no,
                  BodyNo = body.body_no,
                  BodyName = body.body_name,
              };
              fooBodies.Add(fooBody);
          }
          tpo.ArrFooBody = fooBodies;

          List<FooBarTPO> fooBars = new List<FooBarTPO>();
          foreach (var bar in bo.arr_foo_bar)
          {
              FooBarTPO fooBar = new FooBarTPO()
              {
                  FooNo = bar.foo_no,
                  No = bar.bar_no,
                  Name = bar.bar_name,
                  QuxCode = bar.qux_code,
                  QuxName = bar.qux_name,
              };

              List<BarObjectTPO> barObjects = new List<BarObjectTPO>();
              foreach (var obj in bar.arr_bar_object)
              {
                  BarObjectTPO barObject = new BarObjectTPO()
                  {
                      No = obj.bar_no,
                      ObjectNo = obj.object_no,
                      ObjectName = obj.object_name,
                  };
                  barObjects.Add(barObject);
              }
              fooBar.ArrBarObject = barObjects;
              fooBars.Add(fooBar);
          }
          tpo.ArrFooBar = cheese;
          return tpo;
      }
