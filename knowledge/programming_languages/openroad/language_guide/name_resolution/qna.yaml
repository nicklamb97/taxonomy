version: 2
task_description: Explain name resolution and dynamic frame and procedure name resolution in OpenROAD. (2.0)
created_by: assistant
domain: openroad
seed_examples:
  - question: What does it mean that OpenROAD application components share the same name space?
    answer: |
      In OpenROAD, sharing the same name space means that components are identified strictly by name, without
      considering the context in which the name is used. This applies to variables, named constants, frames,
      procedures, and classes.

  - question: What is the order in which OpenROAD searches for names?
    answer: |
      OpenROAD searches for names in the following order:
      1. Current event block, local procedure, or user class method
      2. Current field script
      3. Enclosing field scripts
      4. Current frame, global procedure, or user class script
      5. Current application
      6. Included applications (in the order they were included)
      7. Core library

  - question: How can you direct OpenROAD to search only within a specific application?
    answer: |
      To direct OpenROAD to search only within a specific application, you can qualify the component name with the
      application's name using the syntax: application_name!component_name

  - question: What are the four statements that allow specifying a frame or procedure name at runtime?
    answer: |
      The four statements that allow specifying a frame or procedure name at runtime are:
      1. Callframe
      2. Openframe
      3. Gotoframe
      4. Callproc

  - question: How does dynamic frame and procedure name resolution differ from the usual search order?
    answer: |
      In dynamic frame and procedure name resolution, OpenROAD first searches the currently executing component
      for a local procedure with the specified name. If not found, it then searches for a global component. The
      global search starts with the topmost running application, allowing included applications to call frames
      from including applications.

  - question: What is the behavior difference between dynamic and explicit name resolution?
    answer: |
      Dynamic name resolution (using variables) allows for more flexibility and can call frames across different
      applications, while explicit name resolution is more restrictive and can lead to compile errors when trying
      to call frames from other applications.

document:
  repo: https://github.com/nicklamb97/instructlab-data.git
  commit: 8a9b0fb
  patterns:
    - name_resolution.md
